class Solution {
public:
    int longestWPI(vector<int>& hours) {

        unordered_map<int, int> mp; // Map to store the first occurrence of each cumulative sum
        int sum = 0; // Cumulative sum
        int result = 0; // Maximum length of well-performing interval

        // Traverse through the hours array
        for (int i = 0; i < hours.size(); i++) 
        {
            if (hours[i] > 8) 
            {
                sum += 1; // If hours[i] > 8, add 1 to the cumulative sum (treat as +1)
            } 
            else 
            {
                sum += -1; // Otherwise, subtract 1 from the cumulative sum (treat as -1)
            }

            // Check if the current cumulative sum is positive
            if (sum > 0) 
            {
                result = i + 1; // Update result to the current index i + 1
            } 
            else 
            {
                // Check if there exists a previous cumulative sum (sum - 1) in the map
                if (mp.find(sum - 1) != mp.end()) 
                {
                    // Update result to the maximum of current result and the difference between current index and the first occurrence of (sum - 1)
                    result = max(result, i - mp[sum - 1]);
                }
            }

            // If the current cumulative sum doesn't exist in the map, add it with its index
            if (mp.find(sum) == mp.end()) 
            {
                mp[sum] = i;
            }
        }

        return result; // Return the length of the longest well-performing interval

    
    }
};
