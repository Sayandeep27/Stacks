class Solution {
public:
    string makeGood(string s) {
    
    stack<char> st; // Stack to store characters
    string result; // Resultant string

    for (char c : s) 
    {
        if (!st.empty() && abs(st.top() - c) == 32)
        {
            // If stack is not empty and top of stack is the same character but different case
            st.pop(); // Remove the pair
        } 
        else
        {
            // Push the current character onto the stack
            st.push(c);
        }
    }

    // Construct the result string from characters in the stack
    while (!st.empty())
    {
        result = st.top() + result;
        st.pop();
    }

    return result;


    }
};
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
   
    string makeGood(string s) {
        stack<char> st;
        
        for(char ch : s){
            if(!st.empty() && abs(ch - st.top()) == 32) st.pop();
            else st.push(ch);
        }
        
        string str;
        while(!st.empty()){
            str = st.top() + str;
            st.pop();
        }
        
        return str;
        
    }
};
