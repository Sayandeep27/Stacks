vector<long long> nextGreaterElements(vector<long long>& nums) {
    int n = nums.size();
    vector<long long> ans(n, -1);  // Initialize the answer vector with -1
    stack<long long> st;           // Stack to keep track of elements

    // Traverse the array twice to simulate the circular nature
    for (int i = 2 * n - 1; i >= 0; i--) 
    {
        int idx = i % n;  // Use modulo to wrap around the array

        // Pop elements from the stack that are less than or equal to the current element
        while (!st.empty() && st.top() <= nums[idx]) 
        {
            st.pop();
        }

        // If the stack is not empty, the top element is the next greater element
        if (i < n)       // Only update the answer vector in the first pass
        {                    
            if (!st.empty()) {
                ans[idx] = st.top();
            }
        }

        // Push the current element onto the stack
        st.push(nums[idx]);
    }

    return ans;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& arr) {
         
         int n=arr.size(); 
         vector<int>ans(n,-1); // Initialize result array with -1

         stack<int>st; // Stack to keep track of indices of the array elements

         // Traverse the array twice
         for(int i=0;i<2*n;i++)
         {
            // Use modulo operator to wrap around the array
            while(!st.empty() and arr[i%n]>arr[st.top()])
            {
                ans[st.top()]=arr[i%n];  // Update the result for the index at the top of the stack
                st.pop();   // Pop the stack
            }

            // Only push the index of the first pass
            if(i<n)
            {
                st.push(i%n);
            }
         }

         return ans;

    }
};
