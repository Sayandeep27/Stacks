class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& arr) {
         
         int n=arr.size(); 
         vector<int>ans(n,-1); // Initialize result array with -1

         stack<int>st; // Stack to keep track of indices of the array elements

         // Traverse the array twice
         for(int i=0;i<2*n;i++)
         {
            // Use modulo operator to wrap around the array
            while(!st.empty() and arr[i%n]>arr[st.top()])
            {
                ans[st.top()]=arr[i%n];  // Update the result for the index at the top of the stack
                st.pop();   // Pop the stack
            }

            // Only push the index of the first pass
            if(i<n)
            {
                st.push(i%n);
            }
         }

         return ans;

    }
};

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        
        stack<int>st;
        vector<int>ans;
        vector<int>arr(nums);
        int m=nums.size();
        
       for(int i=0;i<m;i++)
       {
           arr.push_back(nums[i]);
       }
        
       int n=arr.size();
        
        for(int i=n-1;i>=0;i--)
        {
            
            
            if(st.size()==0)
            {
                ans.push_back(-1);
            }
            
            else if(st.size()>0 and st.top()>arr[i])
            {
                ans.push_back(st.top());
            }
            
            else if(st.size()>0 and st.top()<=arr[i])
            {
                       
                while(st.size()>0 and st.top()<=arr[i])
                {
                    st.pop();
                }
                
                if(st.size()==0)
                {
                    ans.push_back(-1);
                    
                }
                else
                {
                     ans.push_back(st.top());
                }
                
                
            }
            
            
            st.push(arr[i]);
            
        }
        
        
        reverse(ans.begin(),ans.end());
        
        vector<int>v;
        
        for(int i=0;i<n/2;i++)
        {
           v.push_back(ans[i]); 
        }
        
        return v;
    }
};
