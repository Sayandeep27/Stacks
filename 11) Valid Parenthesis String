
class Solution {
public:
    bool checkValidString(string s) {
        int n=s.size();


       // low to track the minimum number of open parentheses needed.
       // high to track the maximum number of open parentheses possible.
       
        int low=0,high=0;

        for(int i=0;i<n;i++)
        {
            if(s[i]=='(')  // For (, increment both low and high
            {
                low++;
                high++;
            }
            else if(s[i]==')')   // For ), decrement both low and high
            {
                if(low>0) low--;

                high--;
            }
            else  // For *, treat it as both an open and close parenthesis
            {
                if(low>0) low--;  // Decrement low (consider * as ')'   )

                high++;   // Increment high(consider * as '('    )
            }

            // If high is negative, there are too many ')' so far
            if(high<0) return false;
        }

        // Check if all open parentheses are matched
        return low==0;
    }
};

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    bool checkValidString(string s) {

        stack<int> st1;  // Stack to store positions of '('
        stack<int> st2;  // Stack to store positions of '*'

        int n = s.size();

        // Iterate through each character in the string
        for (int i = 0; i < n; i++) 
        {
            if (s[i] == '(') 
            {
                st1.push(i);  // Push the position of '(' onto stack st1
            } 
            else if (s[i] == '*') 
            {
                st2.push(i);  // Push the position of '*' onto stack st2
            } 
            else 
            {
                // For ')', try to balance with '(' first
                if (!st1.empty()) 
                {
                    st1.pop();  // Pop a matching '('
                } 
                else if (!st2.empty()) 
                {
                    st2.pop();  // Pop a '*' if no '(' available
                } 
                else 
                {
                    return false;  // No matching '(' or '*' for ')'
                }
            }
        }

        // Handle remaining '(' in the stack
        // Remaining '*' can be treated as ')'
        while (!st1.empty()) 
        {
            if (st2.empty()) 
            {
                return false;  // No '*' to balance remaining '('
            } 
            else if (st2.top() > st1.top()) 
            {
                st2.pop();  // Use '*' to balance '('
                st1.pop();
            } 
            else 
            {
                return false;  // '*' cannot balance '(' at this position
            }
        }

        return true;  // All '(' are balanced
    }
};
