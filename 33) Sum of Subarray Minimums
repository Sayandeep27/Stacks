class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {

         int n=arr.size();
         vector<int>left(n),right(n);

         stack<pair<int,int>>st;

         // nearest smaller to right

         for(int i=n-1;i>=0;i--)
         {
             while(st.size()>0 and arr[i]<=st.top().first) st.pop();

             if(st.size()==0) right[i]=n-1;
             else right[i]=st.top().second-1;

             st.push({arr[i],i});
         }  

         // clear the stack
         st={};

       
         // nearest smaller to left

         for(int i=0;i<n;i++)
         {
             while(st.size()>0 and arr[i]<st.top().first) st.pop();

             if(st.size()==0) left[i]=0;
             else left[i]=st.top().second+1;

             st.push({arr[i],i});
         }


         long long ans=0;

         long long mod=pow(10,9)+7;

         for(int i=0;i<n;i++)
         {
             long long temp=(arr[i]*(i-left[i]+1)) % mod;

             temp=(temp*(right[i]-i+1)) % mod;

             ans+=temp;

             ans=ans%mod;
         }


         return ans;

    }
};
