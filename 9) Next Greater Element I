vector<long long> nextLargerElement(vector<long long> arr, int n){
       
    stack<long long> st;  // Create a stack to keep track of elements for finding the next larger element
       
    vector<long long> ans;  // Create a vector to store the answer
       
    // Traverse the array from right to left
    for(int i = n - 1; i >= 0; i--)
    {
        // For the last element, there is no next greater element
        if(i == n - 1)
        {
            ans.push_back(-1);  // Push -1 as there is no next greater element
            st.push(arr[i]);    // Push the current element to the stack
        }
        else
        {
            // Pop elements from the stack until the current element is smaller than the top element
            while(st.size() > 0 && arr[i] >= st.top()) st.pop();
               
            // If stack is empty, there is no next greater element
            if(st.size() == 0) ans.push_back(-1);
            else ans.push_back(st.top());  // The top element of the stack is the next greater element
               
            st.push(arr[i]);  // Push the current element to the stack
        }
    }
       
    reverse(ans.begin(), ans.end());  // Reverse the answer vector to get the correct order
       
    return ans;  // Return the answer vector
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
vector<long long> nextLargerElement(vector<long long> arr, int n){
         
         vector<long long>ans(n,-1); // Initialize result array with -1
         
         stack<long long>st; // Stack to keep track of indices of the array elements

         
         // Traverse the array from left to right
         
         for(int i=0;i<n;i++)
         {
             // While stack is not empty and the current element is greater than the element at index stored at the top of the stack
             while(!st.empty() and arr[i]>arr[st.top()])
             {
                 ans[st.top()]=arr[i]; // Update the result for the index at the top of the stack
                 st.pop(); // Pop the stack
             }
             
             
             st.push(i); // Push current index onto the stack
         }
         
         
         return ans;
        
    }

