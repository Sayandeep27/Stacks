#include <iostream>

using namespace std;

#define MAX_SIZE 100 // Define the maximum size of the queue

class Queue {

    int arr[MAX_SIZE];
    int front, rear;

public:
    Queue() 
    {
        front = -1;
        rear = -1;  // Initialize the queue as empty
    }


    // Enqueue an element into the queue
    void enqueue(int x) 
    {
        if (rear >= MAX_SIZE - 1) 
        {
            cout << "Queue Overflow\n";
            return;
        }

        if (front == -1) front = 0;

        arr[++rear] = x;
    }




    // Dequeue an element from the queue
    void dequeue() 
    {
        if (front == -1 || front > rear) 
        {
            cout << "Queue Underflow\n";
            return;
        }

        front++;
    }




    // Get the front element of the queue
    int peek() 
    {
        if (front == -1 || front > rear) 
        {
            cout << "Queue is Empty\n";
            return -1;
        }

        return arr[front];
    }



    // Check if the queue is empty
    bool isEmpty() 
    {
        return front == -1 || front > rear;
    }


};

int main() {
    Queue queue;
    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);

    cout << "Front element is " << queue.peek() << "\n";

    queue.dequeue();

    cout << "Front element is " << queue.peek() << "\n";
    return 0;
}
