class Solution {
public:
    string removeOuterParentheses(string S) {
        
    string result;
    int openCount = 0; // Counter to track open parentheses
    int closeCount = 0; // Counter to track close parentheses
    int start = 0; // Start index of the current outermost parentheses pair

    for (int i = 0; i < S.size(); ++i) 
    {
        if (S[i] == '(') 
        {
            openCount++;
        } 
        else  // S[i] == ')'
        {           
            closeCount++;
        }

        // Check if we have a complete outermost pair
        if (openCount == closeCount)
        {
            // Add the substring excluding the outermost parentheses to the result
            result += S.substr(start + 1, i - start - 1);
            
            // Reset start index for the next potential outermost pair
            start = i + 1;
        }
    }

    return result;
    }
};

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    string removeOuterParentheses(string S) {
        
        string str = "";  // String to store the result

        int n = s.size();  // Get the size of the input string
        
        stack<char> st;  // Stack to keep track of parentheses

        // Iterate through each character in the string
        for (int i = 0; i < n; i++) 
        {
            if (s[i] == '(') 
            {
                // If the character is '(', check if it is an outer parenthesis
                if (st.size() == 0) 
                {
                    st.push(s[i]);  // Push the outermost '(' onto the stack
                } 
                else 
                {
                    // If it is not an outer parenthesis, add it to the result string
                    str += s[i];
                    st.push(s[i]);  // Push '(' onto the stack
                }
            } 
            else 
            {
                // If the character is ')', pop from the stack
                if (st.size() > 0) st.pop();

                // If the stack is not empty, it means the current ')' is not an outer parenthesis
                if (st.size() > 0) 
                {
                    str += s[i];  // Add it to the result string
                }
            }
        }

        return str;  // Return the result string without outermost parentheses
    }
};
