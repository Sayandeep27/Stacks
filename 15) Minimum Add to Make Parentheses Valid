class Solution {
public:
    int minAddToMakeValid(string s) {
        
        int n = s.size();  // Get the size of the input string
        stack<int> st;  // Stack to store unmatched opening parentheses

        int cnt = 0;  // Counter for unmatched closing parentheses

        // Traverse through the input string
        for (int i = 0; i < n; i++)
        {
            if (s[i] == '(') 
            {
                // If the character is '(', push it onto the stack
                st.push(s[i]);
            } 
            else 
            {
                // If the character is ')'
                if (st.size() == 0) 
                {
                    // If the stack is empty, increment the count of unmatched ')'
                    cnt++;
                } 
                else 
                {
                    // If the stack is not empty, pop the top of the stack
                    // This means we found a matching '(' for the current ')'
                    st.pop();
                }
            }
        }

        // Return the total count of unmatched parentheses
        // cnt is the number of unmatched ')'
        // st.size() is the number of unmatched '('
        
        return cnt + st.size();
    }
};

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int minAddToMakeValid(string S) {
         int balance = 0; // Tracks balance of parentheses
    int additions = 0; // Counts the number of parentheses to be added

    for (char c : S)
    {
        if (c == '(') 
        {
            balance++; // Increment balance for an open parenthesis
        }
        else 
        { // c == ')'
            balance--; // Decrement balance for a close parenthesis
        }
        
        // If balance is negative, we have more ')' than '(' so far
        if (balance == -1) 
        {
            additions++; // Add one more '(' to balance
            balance++; // Reset balance to 0 as we considered the ')' balanced
        }
    }

    // Any remaining positive balance means we have more '(' than ')' so far
    additions += balance;
    
    return additions;
    }
};

