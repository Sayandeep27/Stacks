class Solution {
public:
    int minAddToMakeValid(string S) {
         int balance = 0; // Tracks balance of parentheses
    int additions = 0; // Counts the number of parentheses to be added

    for (char c : S)
    {
        if (c == '(') 
        {
            balance++; // Increment balance for an open parenthesis
        }
        else 
        { // c == ')'
            balance--; // Decrement balance for a close parenthesis
        }
        
        // If balance is negative, we have more ')' than '(' so far
        if (balance == -1) 
        {
            additions++; // Add one more '(' to balance
            balance++; // Reset balance to 0 as we considered the ')' balanced
        }
    }

    // Any remaining positive balance means we have more '(' than ')' so far
    additions += balance;
    
    return additions;
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int minAddToMakeValid(string s) {

         int n = s.size();  // Get the size of the string

        stack<char> st;  // Stack to store unmatched opening parentheses '('

        int cnt = 0;  // Counter for unmatched closing parentheses ')'

        // Iterate through each character in the string
        for (int i = 0; i < n; i++) 
        {
            if (s[i] == '(') 
            {
                st.push(s[i]);  // Push opening parenthesis onto the stack
            } 
            else 
            {
                if (st.size() == 0) 
                {
                    cnt++;  // If stack is empty and a closing parenthesis is encountered, increment count
                } 
                else 
                {
                    st.pop();  // If stack is not empty, pop the matching opening parenthesis
                }
            }
        }



        // The result is the sum of unmatched closing parentheses (cnt) and unmatched opening parentheses (stack size)
        return cnt + st.size();
      
    }
};
